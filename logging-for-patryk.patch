diff --git a/index.js b/index.js
index 5755904..ba9eb64 100644
--- a/index.js
+++ b/index.js
@@ -5,7 +5,7 @@ const sigUtil = require('eth-sig-util')
 
 const hdPathString = `m/44'/60'/0'`
 const type = 'Ledger Hardware'
-const BRIDGE_URL = 'https://metamask.github.io/eth-ledger-bridge-keyring'
+const BRIDGE_URL = 'https://darkwing.github.io/eth-ledger-bridge-keyring'
 
 const pathBase = 'm'
 const MAX_INDEX = 1000
@@ -18,6 +18,7 @@ const NETWORK_API_URLS = {
 
 class LedgerBridgeKeyring extends EventEmitter {
   constructor (opts = {}) {
+    console.log("[LedgerBridgeKeyring][constructor] Initialize!")
     super()
     this.accountIndexes = {}
     this.bridgeUrl = null
@@ -77,11 +78,17 @@ class LedgerBridgeKeyring extends EventEmitter {
   }
 
   unlock (hdPath) {
+    console.log("[LedgerBridgeKeyring][unlock] Called")
     if (this.isUnlocked() && !hdPath) {
+      console.log("[LedgerBridgeKeyring][unlock] Already unlocked, resolving immediately")
       return Promise.resolve('already unlocked')
     }
     const path = hdPath ? this._toLedgerPath(hdPath) : this.hdPath
+
     return new Promise((resolve, reject) => {
+      console.log("[LedgerBridgeKeyring][unlock] Sending 'ledger-unlock' with params: ", {
+        hdPath: path,
+      })
       this._sendMessage({
         action: 'ledger-unlock',
         params: {
@@ -89,9 +96,13 @@ class LedgerBridgeKeyring extends EventEmitter {
         },
       },
       ({ success, payload }) => {
+        console.log("[LedgerBridgeKeyring][unlock] Received 'ledger-unlock' response: ", success, payload)
         if (success) {
           this.hdk.publicKey = Buffer.from(payload.publicKey, 'hex')
           this.hdk.chainCode = Buffer.from(payload.chainCode, 'hex')
+
+          console.log("[LedgerBridgeKeyring][unlock][success!] hdkey:", this.hdkey)
+
           resolve(payload.address)
         } else {
           this._sendMessage({ action: 'ledger-close-bridge' }, () => this.forgetDevice())
@@ -102,7 +113,7 @@ class LedgerBridgeKeyring extends EventEmitter {
   }
 
   addAccounts (n = 1) {
-
+    console.log("[LedgerBridgeKeyring][addAccounts] Called!")
     return new Promise((resolve, reject) => {
       this.unlock()
         .then(async (_) => {
@@ -118,13 +129,19 @@ class LedgerBridgeKeyring extends EventEmitter {
             } else {
               address = this._addressFromIndex(pathBase, i)
             }
+
+            console.log("[LedgerBridgeKeyring][addAccounts] Adding account: ", address)
+
             this.accounts.push(address)
             this.page = 0
           }
           this._sendMessage({ action: 'ledger-close-bridge' }, () => this.forgetDevice())
+
+          console.log("[LedgerBridgeKeyring][addAccounts] Returning accounts: ", this.accounts)
           resolve(this.accounts)
         })
         .catch(e => {
+          console.log("[LedgerBridgeKeyring][addAccounts] Unlock catch: ", e)
           this._sendMessage({ action: 'ledger-close-bridge' }, () => this.forgetDevice())
           reject(e)
         })
@@ -149,6 +166,7 @@ class LedgerBridgeKeyring extends EventEmitter {
   }
 
   removeAccount (address) {
+    console.log("[LedgerBridgeKeyring][removeAccount] Address: ", address)
     if (!this.accounts.map((a) => a.toLowerCase()).includes(address.toLowerCase())) {
       throw new Error(`Address ${address} not found in this keyring`)
     }
@@ -269,6 +287,7 @@ class LedgerBridgeKeyring extends EventEmitter {
   }
 
   forgetDevice () {
+    console.log("[LedgerBridgeKeyring][forgetDevice] Called")
     this.accounts = []
     this.page = 0
     this.unlockedAccount = 0
@@ -283,6 +302,7 @@ class LedgerBridgeKeyring extends EventEmitter {
     this.iframe.src = this.bridgeUrl
     this.iframe.allow = 'usb'
     document.head.appendChild(this.iframe)
+    console.log("[LedgerBridgeKeyring][_setupIframe] Iframe is: ", this.iframe)
   }
 
   _getOrigin () {
@@ -292,6 +312,7 @@ class LedgerBridgeKeyring extends EventEmitter {
   }
 
   _sendMessage (msg, cb) {
+    console.log("[LedgerBridgeKeyring][_sendMessage] message is:", msg)
     msg.target = 'LEDGER-IFRAME'
     this.iframe.contentWindow.postMessage(msg, '*')
     const eventListener = ({ origin, data }) => {
